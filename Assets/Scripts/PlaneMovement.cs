//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/PlaneMovement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//github push deneme
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlaneMovements : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlaneMovements()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlaneMovement"",
    ""maps"": [
        {
            ""name"": ""PlaneMovement"",
            ""id"": ""3aaca5aa-e2c5-4f8b-a9d2-a0e039769a60"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""81b82070-9d43-44b0-bdef-5446da0a3cf6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""7ba21a26-6d46-40c5-912e-b990304b812e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""06619226-c792-46d9-bea0-a5055c8fa060"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""405b655f-ddad-4261-8375-d41dc379bc43"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15b2246a-c5cc-41a4-ab37-6ef23bad86f0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b1e22f2-62ea-42ae-b664-d1c87e467aff"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5a178cd-562f-4cbe-906a-4f54e17a57d6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90fde75b-4dcb-4a4c-a4a6-5187bed5e1f2"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe3e50df-e66a-4d56-857a-4cb1f156f07c"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c3dcaed-70c0-47a7-8f1b-ea5412b51e0b"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""159098bd-3b2a-4413-b8fb-79972a062690"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlaneMovement
        m_PlaneMovement = asset.FindActionMap("PlaneMovement", throwIfNotFound: true);
        m_PlaneMovement_Move = m_PlaneMovement.FindAction("Move", throwIfNotFound: true);
        m_PlaneMovement_Roll = m_PlaneMovement.FindAction("Roll", throwIfNotFound: true);
        m_PlaneMovement_Pitch = m_PlaneMovement.FindAction("Pitch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlaneMovement
    private readonly InputActionMap m_PlaneMovement;
    private IPlaneMovementActions m_PlaneMovementActionsCallbackInterface;
    private readonly InputAction m_PlaneMovement_Move;
    private readonly InputAction m_PlaneMovement_Roll;
    private readonly InputAction m_PlaneMovement_Pitch;
    public struct PlaneMovementActions
    {
        private @PlaneMovements m_Wrapper;
        public PlaneMovementActions(@PlaneMovements wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlaneMovement_Move;
        public InputAction @Roll => m_Wrapper.m_PlaneMovement_Roll;
        public InputAction @Pitch => m_Wrapper.m_PlaneMovement_Pitch;
        public InputActionMap Get() { return m_Wrapper.m_PlaneMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlaneMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlaneMovementActions instance)
        {
            if (m_Wrapper.m_PlaneMovementActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlaneMovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlaneMovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlaneMovementActionsCallbackInterface.OnMove;
                @Roll.started -= m_Wrapper.m_PlaneMovementActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_PlaneMovementActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_PlaneMovementActionsCallbackInterface.OnRoll;
                @Pitch.started -= m_Wrapper.m_PlaneMovementActionsCallbackInterface.OnPitch;
                @Pitch.performed -= m_Wrapper.m_PlaneMovementActionsCallbackInterface.OnPitch;
                @Pitch.canceled -= m_Wrapper.m_PlaneMovementActionsCallbackInterface.OnPitch;
            }
            m_Wrapper.m_PlaneMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Pitch.started += instance.OnPitch;
                @Pitch.performed += instance.OnPitch;
                @Pitch.canceled += instance.OnPitch;
            }
        }
    }
    public PlaneMovementActions @PlaneMovement => new PlaneMovementActions(this);
    public interface IPlaneMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnPitch(InputAction.CallbackContext context);
    }
}
